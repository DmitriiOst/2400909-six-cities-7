openapi: 3.1.0
info:
  title: API сервер для демо-проекта «Шесть городов».
  description: |-
    * Список ресурсов и маршрутов сервера «Шесть городов».
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 2.0.0
tags:
  - name: users
    description: Действия с пользователем.
  - name: offers
    description: Действия с предложениями по аренде.
  - name: comments
    description: Действия с комментариями.

paths:
  /offers:
    post:
      tags:
        - offers
      summary: Создание нового предложения.
      description: Регистрирует новое предложение.

      parameters:
        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: true
          schema:
            type: string
            example: T2xpdjfjjOIUcnk7BnbWFpbC5jb298=

      requestBody:
        description: Информация для создания нового предложения.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/offer'
        required: true

      responses:
        "201":
          description: Предложение успешно создано.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'

        "401":
          description: Ошибка валидации данных.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationErrorMessage'

        "403":
          description: Пользователь не авторизован.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authErrorMessage'

  /offers/{offerId}:
    get:
      tags:
        - offers
      summary: Получить предложение.
      description: Возвращает детальную информацию по предложению.

      parameters:
        - name: offerId
          in: path
          description: Уникальный идентификатор предложения
          required: true
          schema:
            type: number
            example: 1

      responses:
        "200":
          description: Возвращает объект предложения.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        "404":
          description: Если предложение не найдено.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFoundErrorMessage'

    patch:
      tags:
        - offers
      summary: Редактирование предложения.
      description: Редактирует предложение по аренды.

      parameters:
        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: true
          schema:
            type: string
            example: T2xpdjfjjOIUcnk7BnbWFpbC5jb298=

      requestBody:
        description: Обновленная информация о предложении.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/offer'
        required: true

      responses:
        "200":
          description: Объявление успешно отредактировано.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'

        "403":
          description: Валидация не пройдена.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationErrorMessage'

        "401":
          description: Пользователь не авторизован.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authErrorMessage'

    delete:
      tags:
        - offers
      summary: Удаление предложения по аренде.
      description: Удаляет предложение по аренде.

      parameters:
        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: true
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=

      responses:
        "204":
          description: Предложение успешно удалено.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Предложение с идентификатором 5 успешно удалено.

  /comments/{offerId}:
    get:
      tags:
        - comments
      summary: Получить список комментариев.
      description: Возвращает список комментариев для предложения.

      operationId: getComment
      parameters:
        - name: offerId
          in: path
          description: Уникальный идентификатор предложения.
          required: true
          schema:
            type: number
            example: 1

        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: false
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=

      responses:
        '200':
          description: Список комментариев.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/commentGet'

        '400':
          description: Ошибка тела запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFoundErrorMessage'

    post:
      tags:
        - comments
      summary: Добавит новый комментарий
      description: Добавляет новый комментарий для предложения.

      operationId: postComment
      parameters:
        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: true
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=

        - name: offerId
          in: path
          description: Уникальный идентификатор предложения
          required: true
          schema:
            type: number
            example: 1

      requestBody:
        description: Объект с новым комментарием
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/commentPost'
        required: true

      responses:
        '200':
          description: Список комментариев для предложения.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/commentGet'

        '400':
          description: Ошибка тела запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFoundErrorMessage'

        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authErrorMessage'

      security:
        - tokenAuth: []



  /users/register:
    post:
      tags:
        - users
      summary: Создание (регистрация) нового пользователя.
      description: Регистрирует нового пользователя.

      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true

      responses:
        "201":
          description: Пользователь зарегистрирован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "409":
          description: Пользователь с таким email уже существует.

  /users/login:
    get:
      tags:
        - users
      summary: Вход в закрытую часть приложения.
      description: Вход в закрытую часть приложения.

      parameters:
        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: true
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=

      responses:
        "200":
          description: Пользователь авторизован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authInfo'

        "400":
          description: Пользователь с таким именем не существует. Неверный логин или пароль.

        "401":
          description: Пользователь не авторизован.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authErrorMessage'

  /users/logout:
    delete:
      tags:
        - users
      summary: Завершение пользовательского сеанса.
      description: Выход из закрытой части приложения.

      parameters:
        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: true
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=

      responses:
        "204":
          description: Выход выполнен.
      security:
        - tokenAuth: []

  /offers/{city}/premium:
    get:
      tags:
        - offers
      summary: Получить список всех премиальных предложений для города.
      description: Получить список всех премиальных предложений для города (не более 3-х).

      parameters:
        - name: city
          in: path
          description: Наименование города.
          required: true
          schema:
            type: number
            example: 1

      responses:
        "200":
          description: Возвращает список предложений.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offers/{city}/premium'

        "404":
          description: Если город не найден.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFoundErrorMessage'

  /offers/favorites:
    get:
      tags:
        - offers
      summary: Получит список избранных предложений.
      description: Получит весь список избранных предложений.

      parameters:
        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: true
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=

      responses:
        "200":
          description: Возвращает список избранных предложений.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offers/favorites'

        "403":
          description: Пользователь не авторизован.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authErrorMessage'

  /offers/favorites/{offerId}/{action}:
    post:
      tags:
        - offers
      summary: Добавляет или удаляет предложение из избранного.
      description: Добавляет или удаляет предложение из избранного.

      parameters:
        - name: offerId
          in: path
          description: Уникальный идентификатор предложения по аренде.
          required: true
          schema:
            type: number
            example: 1

        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: true
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=

      responses:
        "200":
          description: Возвращает список предложений.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Предложение с идентификатором 9 успешно добавлено в избранное.

        "403":
          description: Пользователь не авторизован.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authErrorMessage'

components:
  schemas:

    user:
      type: object

      properties:
        email:
          type: string
          example: keks@htmlacademy.ru

        password:
          type: string
          example: 123456

    authInfo:
      type: object

      properties:
        id:
          type: string
          example: 1

        email:
          type: string
          example: keks@htmlacademy.ru

        name:
          type: string
          example: Oliver.conner

        avatarUrl:
          type: string
          example: "img/1.png"

        isPro:
          type: boolean
          example: true

        token:
          type: string
          example: 8ZidsUU03JzQxiZWILHAY4exsij

    authUser:
      type: object

      properties:
        email:
          type: string
          example: keks@htmlacademy.ru

        password:
          type: string
          example: 123456

    userToken:
      type: object

      properties:
        token:
          type: string
          example: 8ZidsUU03JzQxiZWILHAY4exsij

    offer:
      type: object

      properties:
        title:
          type: string
          example: 'House in countryside'

        description:
          type: string
          example: 'A new spacious villa, one floor. All commodities, jacuzzi and'

        dateOfPublication:
          type: string
          example: '2024-03-15T12:48:40.284Z'

        city:
          type: object
          example: {
            location: {
              latitude: 52.370216,
              longitude: 4.895168
            },
            name: 'Amsterdam'
          }

        previewImage:
          type: string
          example: 'https://15.design.htmlacademy.pro/static/hotel/5.jpg'

        images:
          type: array
          example: [
            https://15.design.htmlacademy.pro/static/hotel/3.jpg,
            https://15.design.htmlacademy.pro/static/hotel/11.jpg
          ]

        isPremium:
          type: boolean
          example: true

        isFavorite:
          type: boolean
          example: true

        rating:
          type: number
          example: 3

        type:
          type: string
          example: 'house'

        bedrooms:
          type: number
          example: 3

        maxAdults:
          type: number
          example: 3

        price:
          type: number
          example: 3

        goods:
          type: array
          example: [
            Fridge,
            Breakfast,
            Washerg
          ]

        host:
          type: string
          example: 'ZidsUU03JzQxiZWILHAY4exsij'

        location:
          type: object
          example: {
            latitude: 52.370216,
            longitude: 4.895168
          }

        commentsCount:
          type: number
          example: 0

    offerItem:
      type: object

      properties:
        price:
          type: number
          example: 3

        title:
          type: string
          example: 'House in countryside'

        type:
          type: string
          example: 'house'

        isFavorite:
          type: boolean
          example: true

        dateOfPublication:
          type: string
          example: '2024-03-15T12:48:40.284Z'

        city:
          type: object
          example: {
            location: {
              latitude: 52.370216,
              longitude: 4.895168
            },
            name: 'Amsterdam'
          }

        previewImage:
          type: string
          example: 'https://15.design.htmlacademy.pro/static/hotel/9.jpg'

        isPremium:
          type: boolean
          example: true

        rating:
          type: number
          example: 3

        commentsCount:
          type: number
          example: 10

    offers:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/offerItem'

    commentGet:
      type: object
      properties:
        comment:
          type: string
          example: A quiet cozy and picturesque that hides behind a a river by the unique lightness of Amsterdam.
        date:
          type: string
          example: 2019-05-08T14:13:56.569Z
        id:
          type: number
          example: 1
        rating:
          type: number
          example: 4
        user:
          type: object
          properties:
            avatarUrl:
              type: string
              example: img/1.png
            id:
              type: number
              example: 1
            isPro:
              type: boolean
              example: false
            name:
              type: string
              example: Oliver.conner

    commentPost:
      type: object
      properties:
        comment:
          type: string
          example: A quiet cozy and picturesque that hides behind a a river by the unique lightness of Amsterdam.
        rating:
          type: number
          example: 4

    city:
      type: object

      properties:
        name:
          type: string
          example: 'Paris'

        location:
          type: object
          example: {
            latitude: 58.0025,
            longitude: 4.057496
          }

    cities:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/city'

    authErrorMessage:
      type: object
      properties:
        error:
          type: string
          example: Вы не авторизованы, либо не имеет прав на доступ к данной странице.

    validationErrorMessage:
      type: object
      properties:
        error:
          type: string
          example: Данные не прошли валидацию.

    notFoundErrorMessage:
      type: object
      properties:
        error:
          type: string
          example: Предложение не найдено.

  securitySchemes:
    tokenAuth:
      type: apiKey
      name: X-Token
      in: header
